
1. Faciliter l'expérience utilisateur
   Description: L'application doit être conçue pour offrir une expérience fluide et agréable aux clients du restaurant OSusaké.
   1.1 Interface utilisateur intuitive (Refine)
       Description: L'interface détaille davantage l'exigence principale sur l'expérience utilisateur.
   1.2 Optimisation des commandes (Verify)
       Description: Les commandes doivent être testées pour s'assurer qu'elles sont correctement transmises.

2. Assurer la fiabilité et la sécurité
   Description: Le système doit garantir la sécurité des données utilisateur et être robuste face aux pannes.
   2.1 Sécurisation des connexions réseau (DeriveReqt)
       Description: Dérivée des contraintes réglementaires sur la protection des données (ex. RGPD).
   2.2 Gestion des permissions (Verify)
       Description: Les permissions doivent être testées pour garantir un accès sécurisé.

3. Conception de l'infrastructure réseau
   Description: Fournir une infrastructure réseau fiable qui assure la connectivité entre les différents appareils.
   3.1 Configuration du routeur et du switch (Refine)
       Description: Cette exigence précise la configuration réseau nécessaire pour l'infrastructure.
   3.2 Point d'accès Wi-Fi (Verify)
       Description: La connectivité Wi-Fi doit être validée par des tests pratiques.

4. Serveur Web et Base de Données
   Description: Déployer un serveur web et une base de données robuste pour héberger l'application et gérer les données.
   4.1 Installation d'un serveur LAMP (Refine)
       Description: Cette sous-exigence spécifie comment l'application sera hébergée.
   4.2 Base de données sécurisée (Verify)
       Description: La sécurité de la base de données doit être testée pour protéger les informations sensibles.

5. Développement de l'application
   Description: Concevoir et implémenter une application frontend et backend adaptée aux besoins du restaurant.
   5.1 Développement Frontend (Verify)
       Description: Les tests utilisateur vérifieront l'ergonomie et l'affichage de l'interface.
   5.2 Développement Backend (Refine)
       Description: Cette sous-exigence précise la gestion des commandes et la logique métier.
   5.3 Dashboard d'administration (Verify)
       Description: Le tableau de bord doit être testé pour vérifier qu'il permet les modifications prévues.

6. Respect des contraintes financières
   Description: Le projet doit être réalisé dans le budget limité à 200 €.

7. Respect des contraintes de qualité
   Description: La documentation du projet doit être complète et conforme aux normes.

8. Tests et validations
   Description: Garantir le bon fonctionnement du système avec des tests rigoureux.
   8.1 Tests de performance (Verify)
       Description: Les performances doivent être validées par des simulations de charge.
   8.2 Tests de sécurité (Verify)
       Description: Les vulnérabilités doivent être identifiées via des tests d'intrusion.
   8.3 Tests de convivialité (Refine)
       Description: Cette sous-exigence précise comment recueillir des retours d'expérience pour améliorer l'interface.

9. Gestion des sauvegardes
   Description: Automatiser la sauvegarde des données pour assurer la récupération rapide en cas de problème.
   9.1 Automatisation des sauvegardes (DeriveReqt)
       Description: Dérivé des besoins en continuité de service et protection des données.
   9.2 Procédure de restauration (Verify)
       Description: Les étapes de restauration doivent être validées par des tests pratiques.

10. Surveillance et maintenance
   Description: Mettre en place des outils pour surveiller les performances et assurer une maintenance régulière.
   10.1 Surveillance des ressources serveur (Verify)
       Description: Les outils de monitoring doivent être testés pour assurer leur bon fonctionnement.
   10.2 Documentation des mises à jour (Refine)
       Description: Cette sous-exigence précise les informations nécessaires pour mettre à jour le système.
